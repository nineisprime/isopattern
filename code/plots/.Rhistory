for (j in 1:i){
row = row + 1
a = (i-1)*i/2
b = (i+1)*i/2
parent1 = a + j
parent2 = a + j + 1
child1 = b + j
child2 = b + j + 1
A[row,child1] = -1
A[row,child2] = -1
A[row,parent1] = 1
A[row,parent2] = 1
}
}
for (i in 2:(m-1)){
row = row + 1
parent = (i-1)*i/2 + 1
child =  (i+1)*i/2 + 1
A[row,parent] = 1
A[row,child] = -1
row = row + 1
parent = (i-1)*i/2 + i
child =  (i+1)*i/2 + i + 1
A[row,parent] = 1
A[row,child] = -1
}
A
m = 3
n = m*(m + 1)/2
f.index <- seq(1,n)
r.index <- last(f.index) + seq(1, n)
t.index <- last(r.index) + 1
num.vars <- t.index
A <- Matrix(0, nrow = (m+1)*(m+2)/2 - 3, ncol = num.vars)
row = 0
for (i in 1:(m-1)){
for (j in 1:i){
row = row + 1
a = (i-1)*i/2
b = (i+1)*i/2
parent1 = a + j
parent2 = a + j + 1
child1 = b + j
child2 = b + j + 1
A[row,child1] = -1
A[row,child2] = -1
A[row,parent1] = 1
A[row,parent2] = 1
}
}
for (i in 2:(m-1)){
row = row + 1
parent = (i-1)*i/2 + 1
child =  (i+1)*i/2 + 1
A[row,parent] = 1
A[row,child] = -1
row = row + 1
parent = (i-1)*i/2 + i
child =  (i+1)*i/2 + i + 1
A[row,parent] = 1
A[row,child] = -1
}
A
A <- Matrix(0, nrow = (m+1)*(m+2)/2 - 3, ncol = num.vars)
A[1] = c(1,-1,-1,rep(0,num.vars-3))
row = 1
for (i in 2:(m-1)){
for (j in 1:i){
row = row + 1
a = (i-1)*i/2
b = (i+1)*i/2
parent1 = a + j
parent2 = a + j + 1
child1 = b + j
child2 = b + j + 1
A[row,child1] = -1
A[row,child2] = -1
A[row,parent1] = 1
A[row,parent2] = 1
}
}
for (i in 2:(m-1)){
row = row + 1
parent = (i-1)*i/2 + 1
child =  (i+1)*i/2 + 1
A[row,parent] = 1
A[row,child] = -1
row = row + 1
parent = (i-1)*i/2 + i
child =  (i+1)*i/2 + i + 1
A[row,parent] = 1
A[row,child] = -1
}
A
A <- Matrix(0, nrow = (m+1)*(m+2)/2 - 3, ncol = num.vars)
A
A[1] = c(1,-1,-1,rep(0,num.vars-3))
A <- Matrix(0, nrow = (m+1)*(m+2)/2 - 3, ncol = num.vars)
A[1,1] = 1
A[1,2] = -1
A[1,3] = -1
row = 1
for (i in 2:(m-1)){
for (j in 1:i){
row = row + 1
a = (i-1)*i/2
b = (i+1)*i/2
parent1 = a + j
parent2 = a + j + 1
child1 = b + j
child2 = b + j + 1
A[row,child1] = -1
A[row,child2] = -1
A[row,parent1] = 1
A[row,parent2] = 1
}
}
for (i in 2:(m-1)){
row = row + 1
parent = (i-1)*i/2 + 1
child =  (i+1)*i/2 + 1
A[row,parent] = 1
A[row,child] = -1
row = row + 1
parent = (i-1)*i/2 + i
child =  (i+1)*i/2 + i + 1
A[row,parent] = 1
A[row,child] = -1
}
A
A <- Matrix(0, nrow = (m+1)*(m+2)/2 - 3, ncol = num.vars)
A[1,1] = 1
A[1,2] = -1
A[1,3] = -1
row = 1
for (i in 3:m){
for (j in 1:i){
row = row + 1
a = (i-1)*i/2
b = (i-1)*(i-2)/2
child1 = a + j
child2 = a + j + 1
parent1 = b + j
parent2 = b + j + 1
A[row,child1] = -1
A[row,child2] = -1
A[row,parent1] = 1
A[row,parent2] = 1
}
}
for (i in 2:(m-1)){
row = row + 1
parent = (i-1)*i/2 + 1
child =  (i+1)*i/2 + 1
A[row,parent] = 1
A[row,child] = -1
row = row + 1
parent = (i-1)*i/2 + i
child =  (i+1)*i/2 + i + 1
A[row,parent] = 1
A[row,child] = -1
}
A
if (!require("Rmosek")) {
stop ("Rmosek not installed.")
}
last <- function (x) {
# x is a sequence
return (x[length(x)])
}
DEPTH = 5
depth = 5
n = 2^depth - 1
f.index <- seq(1,n)
r.index <- last(f.index) + seq(1, n)
t.index <- last(r.index) + 1
num.vars <- t.index
isotree.regression <- list(sense = "min")
# Objective: t = sqrt(sum((y-z)^2))
# Note that MSE = (1/n) * (t^2).
isotree.regression$c <- c(rep(0,num.vars - 1),1)
A1 <- Matrix(0, nrow = n - 1, ncol = num.vars)
A1 <- Matrix(0, nrow = n - 1, ncol = num.vars)
for (l in 2:depth) {
for (j in 1:2^(l-2)){
for (i in 1:2){
index = 2^(l-1) - 1 + 2*(j-1) + i
A1[index - 1,index] = -1
A1[index - 1,2^(l-2) - 1 + j] = 1
}
}
}
A3 <- Matrix(0, nrow = n, ncol = num.vars)
for (i in 1:n){
A3[i,i] = w[i]
A3[i,n+i] = w[i]
}
isotree.regression$A <- rBind(A2,A3)
isotree.regression$bc <- rbind(
blc = c(rep(0,nrow(A2)),y),
buc = c(rep(0,nrow(A2)),y)
)
# Empty constraints on the program variables
isotree.regression$bx <- rbind(
blx = c(rep(-Inf,n),rep(-Inf,n),0),
bux = c(rep(Inf,2*n),Inf)
)
# Quadratic objective: mean squared error
# (replaced by an equivalent conic constraint)
isotree.regression$cones <- cbind(
list("QUAD", c(t.index,r.index))
)
solver4 = function(depth,y,w){# Import Rmosek
if (!require("Rmosek")) {
stop ("Rmosek not installed.")
}
last <- function (x) {
# x is a sequence
return (x[length(x)])
}
# [Program variables]
# fitted values: _1,..,f_n.
# auxiliary variables: r_i = y_i - f_i
# objective replacement: t
n = 2^depth - 1
f.index <- seq(1,n)
r.index <- last(f.index) + seq(1, n)
t.index <- last(r.index) + 1
num.vars <- t.index
# Set up the program
isotree.regression <- list(sense = "min")
# Objective: t = sqrt(sum((y-z)^2))
# Note that MSE = (1/n) * (t^2).
isotree.regression$c <- c(rep(0,num.vars - 1),1)
##Parent Child constraints
A1 <- Matrix(0, nrow = n - 1, ncol = num.vars)
for (l in 2:depth) {
for (j in 1:2^(l-2)){
for (i in 1:2){
index = 2^(l-1) - 1 + 2*(j-1) + i
A1[index - 1,index] = -1
A1[index - 1,2^(l-2) - 1 + j] = 1
}
}
}
##r = w(y - f)
A3 <- Matrix(0, nrow = n, ncol = num.vars)
for (i in 1:n){
A3[i,i] = w[i]
A3[i,n+i] = w[i]
}
isotree.regression$A <- rBind(A2,A3)
isotree.regression$bc <- rbind(
blc = c(rep(0,nrow(A2)),y),
buc = c(rep(0,nrow(A2)),y)
)
# Empty constraints on the program variables
isotree.regression$bx <- rbind(
blx = c(rep(-Inf,n),rep(-Inf,n),0),
bux = c(rep(Inf,2*n),Inf)
)
# Quadratic objective: mean squared error
# (replaced by an equivalent conic constraint)
isotree.regression$cones <- cbind(
list("QUAD", c(t.index,r.index))
)
# Solve the program using Rmosek!
r <- mosek(isotree.regression)
fhat = r$sol$itr$xx[f.index]
return(fhat)
}
depth = 7
n = 2^depth - 1
theta = rep(0,n)
n
depth
y = theta + rnorm(n,0,1)
w = rep(1,n)
hat = solver(depth,y,w)
w = rep(1,n)
hat = solver4(depth,y,w)
solver4 = function(depth,y,w){# Import Rmosek
if (!require("Rmosek")) {
stop ("Rmosek not installed.")
}
last <- function (x) {
# x is a sequence
return (x[length(x)])
}
# [Program variables]
# fitted values: _1,..,f_n.
# auxiliary variables: r_i = y_i - f_i
# objective replacement: t
n = 2^depth - 1
f.index <- seq(1,n)
r.index <- last(f.index) + seq(1, n)
t.index <- last(r.index) + 1
num.vars <- t.index
# Set up the program
isotree.regression <- list(sense = "min")
# Objective: t = sqrt(sum((y-z)^2))
# Note that MSE = (1/n) * (t^2).
isotree.regression$c <- c(rep(0,num.vars - 1),1)
##Parent Child constraints
A1 <- Matrix(0, nrow = n - 1, ncol = num.vars)
for (l in 2:depth) {
for (j in 1:2^(l-2)){
for (i in 1:2){
index = 2^(l-1) - 1 + 2*(j-1) + i
A1[index - 1,index] = -1
A1[index - 1,2^(l-2) - 1 + j] = 1
}
}
}
##r = w(y - f)
A3 <- Matrix(0, nrow = n, ncol = num.vars)
for (i in 1:n){
A3[i,i] = w[i]
A3[i,n+i] = w[i]
}
isotree.regression$A <- rBind(A1,A3)
isotree.regression$bc <- rbind(
blc = c(rep(0,nrow(A2)),y),
buc = c(rep(0,nrow(A2)),y)
)
# Empty constraints on the program variables
isotree.regression$bx <- rbind(
blx = c(rep(-Inf,n),rep(-Inf,n),0),
bux = c(rep(Inf,2*n),Inf)
)
# Quadratic objective: mean squared error
# (replaced by an equivalent conic constraint)
isotree.regression$cones <- cbind(
list("QUAD", c(t.index,r.index))
)
# Solve the program using Rmosek!
r <- mosek(isotree.regression)
fhat = r$sol$itr$xx[f.index]
return(fhat)
}
w = rep(1,n)
hat = solver4(depth,y,w)
solver4 = function(depth,y,w){# Import Rmosek
if (!require("Rmosek")) {
stop ("Rmosek not installed.")
}
last <- function (x) {
# x is a sequence
return (x[length(x)])
}
# [Program variables]
# fitted values: _1,..,f_n.
# auxiliary variables: r_i = y_i - f_i
# objective replacement: t
n = 2^depth - 1
f.index <- seq(1,n)
r.index <- last(f.index) + seq(1, n)
t.index <- last(r.index) + 1
num.vars <- t.index
# Set up the program
isotree.regression <- list(sense = "min")
# Objective: t = sqrt(sum((y-z)^2))
# Note that MSE = (1/n) * (t^2).
isotree.regression$c <- c(rep(0,num.vars - 1),1)
##Parent Child constraints
A1 <- Matrix(0, nrow = n - 1, ncol = num.vars)
for (l in 2:depth) {
for (j in 1:2^(l-2)){
for (i in 1:2){
index = 2^(l-1) - 1 + 2*(j-1) + i
A1[index - 1,index] = -1
A1[index - 1,2^(l-2) - 1 + j] = 1
}
}
}
##r = w(y - f)
A3 <- Matrix(0, nrow = n, ncol = num.vars)
for (i in 1:n){
A3[i,i] = w[i]
A3[i,n+i] = w[i]
}
isotree.regression$A <- rBind(A1,A3)
isotree.regression$bc <- rbind(
blc = c(rep(0,nrow(A1)),y),
buc = c(rep(0,nrow(A1)),y)
)
# Empty constraints on the program variables
isotree.regression$bx <- rbind(
blx = c(rep(-Inf,n),rep(-Inf,n),0),
bux = c(rep(Inf,2*n),Inf)
)
# Quadratic objective: mean squared error
# (replaced by an equivalent conic constraint)
isotree.regression$cones <- cbind(
list("QUAD", c(t.index,r.index))
)
# Solve the program using Rmosek!
r <- mosek(isotree.regression)
fhat = r$sol$itr$xx[f.index]
return(fhat)
}
w = rep(1,n)
hat = solver4(depth,y,w)
hat[1:7]
print(mean((hat - theta)^2))
hat[1:31]
hat[99]
hat[127]
theta[127]
hat[1]^2
depth = 10
n = 2^depth - 1
y = rnorm(n,0,1)
w = rep(1,n)
hat = solver4(depth,y,w)
hat[1:7]
print(mean((hat - theta)^2))
theta = rep(0,n)
print(mean((hat - theta)^2))
theta = rep(1,n)
for (l in 2:depth){
for (j in 1:2^(l - 2)){
#for (i in 1:2){
#theta[2^(l-1) - 1 + 2*(j-1) + 1] = runif(1,0,theta[2^(l-2) - 1 + j])
#theta[2^(l-1) - 1 + 2*(j-1) + 1] = theta[2^(l-2) - 1 + j]
a = runif(1)
b = runif(1,0,1-a)
#theta[2^(l-1) - 1 + 2*(j-1) + 1] = 0.5*theta[2^(l-2) - 1 + j]
#theta[2^(l-1) - 1 + 2*(j-1) + 2] = theta[2^(l-2) - 1 + j] - theta[2^(l-1) - 1 + 2*(j-1) + 1]
theta[2^(l-1) - 1 + 2*(j-1) + 1] = a*theta[2^(l-2) - 1 + j]
theta[2^(l-1) - 1 + 2*(j-1) + 2] = b*theta[2^(l-2) - 1 + j]
}
}
theta[1:7]
y = theta + rnorm(n,0,1)
w = rep(1,n)
hat = solver4(depth,y,w)
hat[1:7]
solver4 = function(depth,y,w){# Import Rmosek
if (!require("Rmosek")) {
stop ("Rmosek not installed.")
}
last <- function (x) {
# x is a sequence
return (x[length(x)])
}
# [Program variables]
# fitted values: _1,..,f_n.
# auxiliary variables: r_i = y_i - f_i
# objective replacement: t
n = 2^depth - 1
f.index <- seq(1,n)
r.index <- last(f.index) + seq(1, n)
t.index <- last(r.index) + 1
num.vars <- t.index
# Set up the program
isotree.regression <- list(sense = "min")
# Objective: t = sqrt(sum((y-z)^2))
# Note that MSE = (1/n) * (t^2).
isotree.regression$c <- c(rep(0,num.vars - 1),1)
##Parent Child constraints
A1 <- Matrix(0, nrow = n - 1, ncol = num.vars)
for (l in 2:depth) {
for (j in 1:2^(l-2)){
for (i in 1:2){
index = 2^(l-1) - 1 + 2*(j-1) + i
A1[index - 1,index] = -1
A1[index - 1,2^(l-2) - 1 + j] = 1
}
}
}
##r = w(y - f)
A3 <- Matrix(0, nrow = n, ncol = num.vars)
for (i in 1:n){
A3[i,i] = w[i]
A3[i,n+i] = w[i]
}
isotree.regression$A <- rBind(A1,A3)
isotree.regression$bc <- rbind(
blc = c(rep(0,nrow(A1)),y),
buc = c(rep(Inf,nrow(A1)),y)
)
# Empty constraints on the program variables
isotree.regression$bx <- rbind(
blx = c(rep(-Inf,n),rep(-Inf,n),0),
bux = c(rep(Inf,2*n),Inf)
)
# Quadratic objective: mean squared error
# (replaced by an equivalent conic constraint)
isotree.regression$cones <- cbind(
list("QUAD", c(t.index,r.index))
)
# Solve the program using Rmosek!
r <- mosek(isotree.regression)
fhat = r$sol$itr$xx[f.index]
return(fhat)
}
w = rep(1,n)
hat = solver4(depth,y,w)
hat[1:7]
print(mean((hat - theta)^2))
depth = 10
n = 2^depth - 1
theta = rep(0,n)
y = theta + rnorm(n,0,1)
#hat1 = solver1(depth,y)
#hat2 = solver2(depth,y)
#ans1 = mean(hat1^2)
#ans2 = mean(hat2^2)
w = rep(1,n)
hat = solver4(depth,y,w)
print(mean((hat - theta)^2))
